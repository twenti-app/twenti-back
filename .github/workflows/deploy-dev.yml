name: Deploy-all

on:
  push:
    branches:
      - main

jobs:
  deploy-mongo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker/docker-compose-mongo.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-mongo.yml -p mongo down && docker-compose -f /home/ec2-user/docker-compose-mongo.yml -p mongo up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-mongo.yml"

  deploy-redis:
    needs: deploy-mongo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker/docker-compose-redis.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-redis.yml -p redis down && docker-compose -f /home/ec2-user/docker-compose-redis.yml -p redis up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-redis.yml"

  deploy-config:
    needs: deploy-redis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME_DEV }} -p ${{ secrets.DOCKERHUB_TOKEN_DEV }}

      - name: Pull image
        run: |
          docker pull twentiapp/dev:config
          docker tag twentiapp/dev:config config
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa config/docker-compose-config-dev.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-config-dev.yml -p config down && docker-compose -f /home/ec2-user/docker-compose-config-dev.yml -p config up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-config-dev.yml"

  deploy-auth:
    needs: deploy-config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME_DEV }} -p ${{ secrets.DOCKERHUB_TOKEN_DEV }}

      - name: Pull image
        run: |
          docker pull twentiapp/dev:auth
          docker tag twentiapp/dev:auth auth
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa auth/docker-compose-auth-dev.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-auth-dev.yml -p auth down && docker-compose -f /home/ec2-user/docker-compose-auth-dev.yml -p auth up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-auth-dev.yml"

  build-eureka:
    needs: deploy-config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v1
        with:
          java-version: 19

      - name: Build project with Maven
        run: mvn clean package -f eureka/pom.xml -DskipTests

      - name: Login a Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_DEV }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_DEV }}

      - name: Construir y empujar la imagen de Docker
        run: |
          docker build -f eureka/Dockerfile --no-cache=true -t eureka eureka/
          docker tag eureka twentiapp/dev:eureka
          docker push twentiapp/dev:eureka
  deploy-eureka:
    needs: build-eureka
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME_DEV }} -p ${{ secrets.DOCKERHUB_TOKEN_DEV }}

      - name: Pull image
        run: |
          docker pull twentiapp/dev:eureka
          docker tag twentiapp/dev:eureka eureka
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa eureka/docker-compose-eureka-dev.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-eureka-dev.yml -p eureka down && docker-compose -f /home/ec2-user/docker-compose-eureka-dev.yml -p eureka up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-eureka-dev.yml"

  build-gateway:
    needs: deploy-config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v1
        with:
          java-version: 19

      - name: Build project with Maven
        run: mvn clean package -f gateway/pom.xml -DskipTests

      - name: Login a Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_DEV }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_DEV }}

      - name: Construir y empujar la imagen de Docker
        run: |
          docker build -f gateway/Dockerfile --no-cache=true -t gateway gateway/
          docker tag gateway twentiapp/dev:gateway
          docker push twentiapp/dev:gateway

  deploy-gateway:
    needs: build-gateway
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME_DEV }} -p ${{ secrets.DOCKERHUB_TOKEN_DEV }}

      - name: Pull image
        run: |
          docker pull twentiapp/dev:gateway
          docker tag twentiapp/dev:gateway gateway
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa gateway/docker-compose-gateway-dev.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-gateway-dev.yml -p gateway down && docker-compose -f /home/ec2-user/docker-compose-gateway-dev.yml -p gateway up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-gateway-dev.yml"

  build-admin:
    needs: deploy-config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v1
        with:
          java-version: 19

      - name: Build project with Maven
        run: mvn clean package -f admin/pom.xml -DskipTests

      - name: Login a Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_DEV }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_DEV }}

      - name: Construir y empujar la imagen de Docker
        run: |
          docker build -f admin/Dockerfile --no-cache=true -t admin admin/
          docker tag admin twentiapp/dev:admin
          docker push twentiapp/dev:admin

  deploy-admin:
    needs: build-admin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME_DEV }} -p ${{ secrets.DOCKERHUB_TOKEN_DEV }}

      - name: Pull image
        run: |
          docker pull twentiapp/dev:admin
          docker tag twentiapp/dev:admin admin
      - name: Copy docker-compose
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa admin/docker-compose-admin-dev.yml ec2-user@${{ SERVER_IP_DEV  }}:/home/ec2-user
      - name: Run container
        run: |
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "docker-compose -f /home/ec2-user/docker-compose-admin-dev.yml -p admin down && docker-compose -f /home/ec2-user/docker-compose-admin-dev.yml -p admin up -d && docker image prune -a -f"
          ssh -o StrictHostKeyChecking=no -t -i ~/.ssh/id_rsa ec2-user@${{ SERVER_IP_DEV  }} "rm /home/ec2-user/docker-compose-admin-dev.yml"
